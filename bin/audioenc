#!/usr/bin/env python3

from gi import require_version as gi_require_version
from multiprocessing.pool import ThreadPool
from mutagen import id3, mp3, File as TagFile
from pathlib import Path
from subprocess import Popen, DEVNULL, PIPE, STDOUT
from sys import argv, exit
from threading import local as thread_local

gi_require_version("GLib", "2.0")
gi_require_version("Gst", "1.0")

from gi.repository import GLib
from gi.repository import Gst

if not Gst.is_initialized():
    Gst.init(None)

TAGMAP = {
    Gst.TAG_REFERENCE_LEVEL: ("replaygain_reference_loudness", "{:.2f} dB"),
    Gst.TAG_TRACK_GAIN:      ("replaygain_track_gain",         "{:.2f} dB"),
    Gst.TAG_TRACK_PEAK:      ("replaygain_track_peak",         "{:.6f}"),
}

def audioenc(path):
    fn = Path(path)
    outpath = fn.with_suffix(".opus")
    fn = fn.resolve()
    outfn = outpath.resolve()

    if outfn.exists():
        print("[", path, "]", "output file", outpath, "already exists; skipping")
        return

    if not fn.exists():
        print("[", path, "]", "doesn't exist; skipping")
        return

    if not fn.is_file():
        print("[", path, "]", "is not a file; skipping")
        return

    print("[", path, "]", "encoding to OPUS")
    sox = Popen(
        (
            "sox",
            # input
            fn,
            # output as 24 bit FLAC compression level 0 to stdout
            "-t", "flac", "-C", "0", "-b", "24", "-",
            # make headroom available for rate
            "gain", "-h",
            # rate convert to 48 kHz
            "rate", "-v", "-L", "48k",
            # normalize to -3 dB
            "gain", "-n", "-3",
        ),
        stdin=DEVNULL,
        stdout=PIPE,
    )
    opusenc = Popen(
        (
            "opusenc",
            "--quiet",
            "--discard-pictures",
            "--bitrate", "182",
            "-", outfn,
        ),
        stdin=sox.stdout,
        stderr=STDOUT,
    )

    with sox, opusenc:
        pass

    fp = TagFile(outfn)
    fp.pop("comment", None)
    fp.pop("encoder", None)
    fp.pop("encoder_options", None)
    fp.save()

    print("[", path, "]", "saved as", outpath)
    return outpath

class ReplaygainPipeline:
    def __init__(self):
        self.pipe = Gst.Pipeline()

        self.uridecodebin = Gst.ElementFactory.make("uridecodebin", None)
        self.audioconvert = Gst.ElementFactory.make("audioconvert", None)
        self.audioresample = Gst.ElementFactory.make("audioresample", None)
        self.rganalysis = Gst.ElementFactory.make("rganalysis", None)
        self.fakesink = Gst.ElementFactory.make("fakesink", None)

        for el in ( self.uridecodebin,
                    self.audioconvert,
                    self.audioresample,
                    self.rganalysis,
                    self.fakesink ):
            self.pipe.add(el)

        # link end of the pipeline statically
        self.audioconvert.link(self.audioresample)
        self.audioresample.link(self.rganalysis)
        self.rganalysis.link(self.fakesink)
        self.rganalysis.set_property("forced", True)

        # dynamically link output stage of uridecodebin to audioconvert
        self.uridecodebin.connect("pad-added", self._on_padadded)

        # get a message bus
        self.bus = self.pipe.get_bus()

    def _on_padadded(self, dbin, pad):
        pad.link(self.audioconvert.get_static_pad("sink"))

    def analyse(self, path):
        fn = Path(path).resolve()

        if not fn.exists():
            print("[", path, "]", "doesn't exist; skipping")
            return

        if not fn.is_file():
            print("[", path, "]", "is not a file; skipping")
            return

        print("[", path, "]", "starting replay-gain analysis")

        self.uridecodebin.set_property("uri", GLib.filename_to_uri(str(fn)))
        self.pipe.set_state(Gst.State.PLAYING)

        results = {}

        while message := self.bus.timed_pop(Gst.CLOCK_TIME_NONE):
            match message.type:
                case Gst.MessageType.EOS:
                    break

                case Gst.MessageType.ERROR:
                    gerror,gdebug = message.parse_error()
                    if gerror:
                        print("[", path, "]", "gstreamer error:", gerror.message)
                    else:
                        print("[", path, "]", "gstreamer error; debug: {")
                        print(gdebug)
                        print("}")
                    break

                case Gst.MessageType.TAG:
                    tags = message.parse_tag()
                    for tag,(key,fmt) in TAGMAP.items():
                        ok,val = tags.get_double(tag)
                        if ok:
                            results[key] = fmt.format(val)

        self.pipe.set_state(Gst.State.NULL)

        if not results:
            return

        print("[", path, "]", "updating tags")
        fp = TagFile(fn)

        match fp:
            case mp3.MP3():
                if fp.tags is None:
                    fp.add_tags()
                fp.tags.delall("RVA2:track")
                fp.tags.delall("RVA2:album")
                fp.tags.delall("TXXX:replaygain_track_gain")
                fp.tags.delall("TXXX:replaygain_album_gain")
                for key,val in results.items():
                    fp.tags.add(
                        id3.TXXX(
                            desc     = key,
                            encoding = id3.Encoding.UTF8,
                            text     = val,
                        )
                    )

            case _:
                fp.update(results)
                fp.pop("replaygain_album_gain", None)
                fp.pop("replaygain_album_peak", None)
                fp.pop("r128_track_gain", None)

        fp.save()

def main(prog, *paths):
    if not paths:
        return

    try:
        tlocal = thread_local()
        encode = Path(prog).name != "rganalysis"

        def tinit():
            tlocal.rgpipe = None

        def run(path):
            # opportunistically create processing pipeline
            # for current thread
            if tlocal.rgpipe is None:
                tlocal.rgpipe = ReplaygainPipeline()

            # encode if requested
            if encode and not (path := audioenc(path)):
                return

            # run replaygain analysis
            tlocal.rgpipe.analyse(path)

        with ThreadPool(initializer=tinit) as pool:
            pool.map(run, paths)

    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    exit(main(*argv) or 0)
